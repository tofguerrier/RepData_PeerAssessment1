plot(M)
## compile a list of available packages on CRAN
aps   <- as.data.frame(available.packages())
## get the list of Depends and clean up a bit
deps  <- gdata::trim(unlist(strsplit(as.character(aps$Depends), ',')))
deps  <- gsub('[ \\(].*|\\n', '', deps)
## freq table
depst <- table(deps)
## plot it!
library(wordcloud)
wordcloud(names(depst), log(as.numeric(depst)), colors = c('green', 'red'))
library(AppliedPredictiveModeling)
install.packages(‘AppliedPredictiveModeling’)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(concrete)
plot(CompressiveStrength)
plot(CompressiveStrength, data= concrete)
plot(concrete$CompressiveStrength, data= concrete)
plot(concrete$CompressiveStrength, col = concrete$Age)
plot(concrete$CompressiveStrength, col = concrete$FlyAsh)
plot(concrete$CompressiveStrength, col = concrete$FlyAsh + 10)
names(concrete)
plot(concrete$CompressiveStrength, col = concrete$Cement)
plot(concrete$CompressiveStrength, col = concrete$Water)
plot(concrete$CompressiveStrength, col = concrete$FineAggregate)
plot(traing$CompressiveStrength, col = training$FineAggregate)
plot(training$CompressiveStrength, col = training$FineAggregate)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col=training$Age)
plot(training$CompressiveStrength, col=training$FlyAsh)
plot(training$CompressiveStrength, col=training$FlyAsh+1)
plot(training$CompressiveStrength, col=training$Cement)
plot(training$CompressiveStrength, col=training$Cement+1)
plot(training$CompressiveStrength, col=training$BlastFurnaceSlag+1)
plot(training$CompressiveStrength, col=training$Water+1)
plot(training$CompressiveStrength, col=training$Superplasticizer+1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(training$Superplasticizer,breaks = 20)
hist(log(training$Superplasticizer),breaks = 20)
hist(log(training$Superplasticizer + 1),breaks = 20)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
?preProcess
preProcess(adData[,"IL*"])
adData[,"IL*"]
adData[,"IL"]
grep("^IL", names(adData))
names[grep("^IL", names(adData))]
names(adData)[grep("^IL", names(adData))]
preProcess(adData[,names(adData)[grep("^IL", names(adData))]])
preProcess(adData[,names(adData)[grep("^IL", names(adData))]],method="pca")
preProcess(adData[,names(adData)[grep("^IL", names(adData))]],method="pca",thresh = 0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training$diagnosis
Ttraining = training[,c("diagnosis", names(adData)[grep("^IL", names(adData))])]
preProc  <- preProcess(adData[,c("diagnosis", names(adData)[grep("^IL", names(adData))])])
preProc  <- preProcess(adData[,c("diagnosis", names(adData)[grep("^IL", names(adData))])])
preProc  <- preProcess(
adData[,c("diagnosis", names(adData)[grep("^IL", names(adData))])])
nadDtata = adData[,c("diagnosis", names(adData)[grep("^IL", names(adData))])]
glm(nadDtata$diagnosis ~ nadDtata[,names(adData)[grep("^IL", names(adData))]])
glm(nadDtata$diagnosis ~ nadDtata[,names(nadDtata)[grep("^IL", names(nadDtata))])
glm(nadDtata$diagnosis ~ nadDtata[,names(nadDtata)[grep("^IL", names(nadDtata))]])
glm(y = nadDtata$diagnosis, x= nadDtata[,names(nadDtata)[grep("^IL", names(nadDtata))]],)
glm(y ~ x, y = nadDtata$diagnosis, x= nadDtata[,names(nadDtata)[grep("^IL", names(nadDtata))]],)
plot(training$CompressiveStrength, col=training$Superplasticizer+1)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(concrete)
plot(training$CompressiveStrength, col=training$Superplasticizer+1)
names(concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(log(training$Superplasticizer + 1),breaks = 20)
hist(training$Superplasticizer,breaks = 200)
log(0)
preProcess(adData[,names(adData)[grep("^IL", names(adData))]],method="pca",thresh = 0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(adData[,names(adData)[grep("^IL", names(adData))]],method="pca",thresh = 0.8)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files = list.files(path = directory)
csvf = files[grep(".csv", files)]
cores = list()
for (f in csvf) {
tmp = read.csv(file = paste0(directory,"/",f),header = TRUE)
countvalid <- sum(!(is.na(tmp[,"sulfate"]) | is.na(tmp[,"nitrate"])))
if (countvalid >= threshold) {
cr1 = cor(tmp$sulfate,tmp$nitrate,
use = "complete.obs",
method = "kendall" )
cores = c(cores,  cr1 )
}
}
return(cores)
}
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
setwd("~/work/Coursera_homework/R Programming/PROG1")
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files = list.files(path = directory)
csvf = files[grep(".csv", files)]
cores = list()
for (f in csvf) {
tmp = read.csv(file = paste0(directory,"/",f),header = TRUE)
countvalid <- sum(!(is.na(tmp[,"sulfate"]) | is.na(tmp[,"nitrate"])))
if (countvalid >= threshold) {
cr1 = cor(tmp$sulfate,tmp$nitrate,
use = "complete.obs",
method = "kendall" )
cores = c(cores,  cr1 )
}
}
return(unlist(cores))
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files = list.files(path = directory)
csvf = files[grep(".csv", files)]
cores = list()
for (f in csvf) {
tmp = read.csv(file = paste0(directory,"/",f),header = TRUE)
countvalid <- sum(!(is.na(tmp[,"sulfate"]) | is.na(tmp[,"nitrate"])))
if (countvalid >= threshold) {
cr1 = cor(tmp$sulfate,tmp$nitrate,
use = "complete.obs",
method = "pearson" )
cores = c(cores,  cr1 )
}
}
return(unlist(cores))
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files = list.files(path = directory)
csvf = files[grep(".csv", files)]
cores = list()
for (f in csvf) {
tmp = read.csv(file = paste0(directory,"/",f),header = TRUE)
countvalid <- sum(!(is.na(tmp[,"sulfate"]) | is.na(tmp[,"nitrate"])))
if (countvalid >= threshold) {
cr1 = cor(tmp$sulfate,tmp$nitrate,
use = "complete.obs",
method = "pearson" )
cores = c(cores,  round(cr1,digits = 5) )
}
}
return(unlist(cores))
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files = list.files(path = directory)
csvf = files[grep(".csv", files)]
cores = list()
for (f in csvf) {
tmp = read.csv(file = paste0(directory,"/",f),header = TRUE)
countvalid <- sum(!(is.na(tmp[,"sulfate"]) | is.na(tmp[,"nitrate"])))
if (countvalid > threshold) {
cr1 = cor(tmp$sulfate,tmp$nitrate,
use = "complete.obs",
method = "pearson" )
cores = c(cores,  round(cr1,digits = 5) )
}
}
return(unlist(cores))
}
cr <- corr("specdata")
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
cr <- corr("specdata")
cr
out <- round(cr[sample(length(cr), 5)], 4
)
out
submit()
setwd("~/work/Coursera_homework/Reproducible Research/P1")
setwd("~/work/Coursera_homework/Reproducible Research/P1/RepData_PeerAssessment1")
?unzip
unzip(activit.zip)
setwd("~/work/Coursera_homework/Reproducible Research/P1/RepData_PeerAssessment1")
unzip(activit.zip)
unzip(zipfile = "./activit.zip")
unzip(zipfile = "./activity.zip")
activity = read.csv(file = "./activity.csv",header=TRUE,quote = FALSE)
activity = read.csv(file = "./activity.csv",header=TRUE)
View(activity)
activity$date = as.Date(activity$date, format = "%Y-%M-%D")
str(activity$date)
activity$date
activity = read.csv(file = "./activity.csv",header=TRUE)
activity$dateA = as.Date(activity$date, format = "%Y-%M-%D")
View(activity)
?as.Date
date()
date()
activity$dateA = as.Date(activity$date)
str(activity$date)
activity$dateA = as.Date(activity$date,format = "%Y-%m-%d")
activity$dateA = as.Date(activity$date,format = "%Y-%M-%d")
View(activity)
activity$date = as.Date(activity$date,format = "%Y-%M-%d")
table(activity$steps, activity$date)
head(table(activity$steps, activity$date))
table(activity$steps)
table(activity$steps, activity$date)
head(table(activity$steps, activity$date))
colSums(table(activity$steps, activity$date))
stepsDay <- colSums(table(activity$steps, activity$date))
hist(stepsDay)
hist(stepsDay, breaks=600)
hist(activity$steps, breaks=600)
hist(activity$steps, breaks=20)
hist(activity$steps, breaks=40)
hist(stepsDay, breaks=40)
hist(stepsDay, breaks=600
)
plot(stepsDay)
plot(stepsDay, type = 'l')
View(activity)
activity = read.csv(file = "./activity.csv",header=TRUE)
activity$day = as.Date(activity$date,format = "%Y-%M-%d")
activity$time = as.Date(paste(activity$date,activity$interval),format = "%Y-%M-%d %H%m")
View(activity)
paste(activity$date,activity$interval),format = "%Y-%M-%d %H%m")
paste(activity$date,activity$interval)
activity$time = as.Date(paste(activity$date,activity$interval),format = "%Y-%m-%d %H%M")
activity$time = as.Date(paste(activity$date,activity$interval/100),format = "%Y-%m-%d %H.%M")
activity$time = as.Date(paste(activity$date,activity$interval/100),format = "%Y-%m-%d %H\.%M")
activity$time = as.Date(paste(activity$date,activity$interval/100),format = "%Y-%m-%d %H\.%M")
```
activity$interval/100
str(activity$interval/100)
activity$time = as.Date(paste(activity$date,str(activity$interval/100)),format = "%Y-%m-%d %H\.%M")
activity$time = as.Date(paste(activity$date,str(activity$interval/100)),format = "%Y-%m-%d %H\.%M")
activity$time = as.Date(paste(activity$date,str(activity$interval/100)),format = "%Y-%m-%d %H.%M")
activity$time = as.Date(paste(activity$date,str(activity$interval/100)),format = "%Y-%m-%d %H.%M")
activity$time = as.Date(paste(activity$date,str(activity$interval/100)),format = "%Y-%m-%d %H.%M")
as.Date(paste(activity$date,str(activity$interval/100)),format = "%Y-%m-%d %H.%M"
)
activity$time = as.Date(paste(activity$date,as.character(activity$interval/100)),format = "%Y-%m-%d %H.%M")
activity$time
activity$time = as.Date.POSIXlt(paste(activity$date,as.character(activity$interval/100)),format = "%Y-%m-%d %H.%M")
activity$time = as.Date.POSIXct(paste(activity$date,as.character(activity$interval/100)),format = "%Y-%m-%d %H.%M")
activity$time = as.Date(x = paste(activity$date,as.character(activity$interval/100)),format = "%Y-%m-%d %H.%M")
View(activity)
activity[1,"time"]
activity[2,"time"]
hist(activity$steps)
hist(activity$steps, breaks = 600)
hist(activity$steps, breaks = 60)
hist(stepsDay, breaks=40)
hist(stepsDay, breaks=400)
hist(stepsDay, breaks=40)
hist(stepsDay, breaks=5)
hist(stepsDay, breaks=50)
mean(stepsDay)
median(stepsDay)
?floor
?trunc
trunc(45)
trunc(45,units = 1)
activity$hour = floor(activity$interval/100)
activity$min = 100 *(activity$interval /100 - floor(activity$interval/100))
View(activity)
activity$time = as.Date(x = paste(activity$date,activity$hour,activity$min),format = "%Y-%m-%d %H %M")
activity$time = as.POSIXct(x = paste(activity$date,activity$hour,activity$min),format = "%Y-%m-%d %H %M")
View(activity)
plot(x = activity$time, y=activity$steps, type = 'l')
plot(x = activity$time, y=activity$steps, type = 'l',
main = "Time series, steps activity", ylab = "Steps", xlab="Time")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y ~ x)
fit = lm(y ~ x)
summary(fit)
data(mtcars)
fit1 = lm(mpg ~ weight, data=mtcars)
fit1 = lm(mpg ~ wt, data=mtcars)
summary(fit1)
37.2851 - 2*1.8776
predict(fit1, data.frame(wt=mean(mtcars$wt)), interval="confidence")
?mtcars
predict(fit1, data.frame(wt=3, interval="confidence")
)
predict(fit1, data.frame(wt=3), interval="confidence")
?predic
?predict
predict(fit1, data.frame(wt=3000), interval="confidence")
predict(fit1, data.frame(wt=1/3), interval="confidence")
predict(fit1, data.frame(wt=2), interval="confidence")
predict(fit1, data.frame(wt=3), interval="confidence")
predict(fit1, data.frame(wt=2), interval="confidence")
predict(fit1, data.frame(wt=1), interval="confidence")
predict(fit1, data.frame(wt=3), interval="confidence")
plot(fit1)
summary(fit1)
-5.3445 -2*0.5591
x <- 1:100
y = 100*x
lm(y ~ x)
lm(x ~ x)
lm(x ~ y)
lm(y ~ x)
lm(y ~ (x/100))
fit2 = lm(mpg ~ wt + 0, data=mtcars)
fit3 = lm(mpg ~ wt, data=mtcars)
summary(fit2)
summary(fit3)
anova(fit2)
anova(fit3)
hist(stepsDay, breaks=50)
hist(stepsDay, breaks=30)
print("Mean is ", mean(stepsDay))
?print
print(paste("Mean is ", mean(stepsDay))
)
paste("Mean is ", mean(stepsDay)
)
paste("Median is: ", median(stepsDay))
abline(v = mean(stepsDay), col=red)
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
legend(x = 450, y = 20, legend = "Mean", col ="red")
legend(x = 450, y = 20, legend = "Mean", col ="red",border = FALSE)
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
legend(x = 450, y = 20, legend = "Mean", col ="red",border = FALSE)
legend(x = 450, y = 20, legend = "Mean",title.col = "red")
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
legend(x = 450, y = 20, legend = "Mean",title.col = "red")
legend(x = 400, y = 20, legend  = "Mean",title.col = "red")
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
legend(x = 400, y = 20, legend  = c("Mean","Median"),title.col = c("red","green")
)
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
legend(x = 400, y = 20, legend  = c("Mean","Median"),col = c("red","green")
)
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
legend(x = 400, y = 20, pch = "sSvV", legend  = c("Mean","Median"),col = c("red","green")))
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
legend(x = 400, y = 20, legend  = c("Mean","Median"),col = c("red","green")))
```
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
text(x = 400, y = 20, legend  = c("Mean","Median"),col = c("red","green")))
text(x = 400, y = 20, legend  = c("Mean","Median"),col = c("red","green"))
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
text(x = 400, y = 20, labels = c("Mean","Median"),col = c("red","green"))
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
text(x = c(450,550), y = 20, labels = c("Mean","Median"),col = c("red","green"))
```
paste("Mean is ", mean(stepsDay))
paste("Median is: ", median(stepsDay))
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
text(x = c(476,576),y = 25, labels = c("Mean","Median"),col = c("red","green"))
```
hist(stepsDay, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
abline(v = mean(stepsDay), col="red")
abline(v = median(stepsDay), col="green")
text(x = c(476,576),y = 21, labels = c("Mean","Median"),col = c("red","green"))
