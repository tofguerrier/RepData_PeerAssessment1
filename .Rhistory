?select
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <-  select(cran, ip_id, package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10 )
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran,avg_bytes = mean(size))
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow=c(2,1)
)
hist(galton$child, break=00)
hist(galton$child, break=100)
hist(galton$child, breaks=100)
hist(galton$parent, breaks=100)
plot(child ~ parent, data = galton)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(w*x)
mean(x)
sqrt(mean(x))
sqrt(mean(w*x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
summary(lm(y ~ x,))
?lm
plot(x,y)
plot(y,x)
summary(lm(y ~ 0+x,))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
w*x
sum(w*x)/sum(w)
data(mtcars)
lm(mpg ~ weight, data = mtcars)
names(mtcars)
?mtcars
lm(mpg ~ wt, data = mtcars)
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
scale(x,center = TRUE, scale = TRUE)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*x)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)
lm(mpg ~ wt, data = mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
scale(x, center = TRUE, scale=TRUE)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
?qunif
qunif(0.75)
quantile(x, c(.25, .50,  .75, .90, .99))
quantile(runif(100000), c(.25, .50,  .75, .90, .99)
)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(x)
temp[1,]
temp[1,]*temp[2,]
sum(temp[1,]*temp[2,])
sum(temp[1,]*temp[2,])/4
sum(temp[1,]*temp[2,])
urldata = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
temp <- tempfile()
download.file(urldata,temp,method = "curl")
data <- read.table(unz(temp, "a1.dat"))
?unz
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
rnorm(n=100000, mean = 0, sd = 1)
var(sample(rnorm(n=100000, mean = 0, sd = 1),size = 10))
var(sample(rnorm(n=100000, mean = 0, sd = 1),size = 10000))
var(sample(rnorm(n=100000, mean = 0, sd = 1),size = 1000))
var(sample(rnorm(n=100000, mean = 0, sd = 1),size = 1000))
pnorm(70, mean = 80, sd = 10)
library(XML)
url <- "http://www.gdacs.org/Cyclones/report.aspx?eventid=41058&episodeid=28&eventtype=TC"
dat <- readHTMLTable(readLines(url), which=5)
dat$latlon <- dat[,8]
levels(dat$latlon) <- sapply(
strsplit(levels(dat[,8]), ",\n        "),
function(x) paste(x[2], x[1], sep=":")
)
dat$Category <- factor(dat$Category, levels=levels(dat$Category)[c(6,7,1:5)],
ordered=TRUE)
dat$cat <- as.numeric(dat$Category)
dat$Gust_kmh <- dat[,6]
levels(dat$Gust_kmh) <- sapply(strsplit(levels(dat[,6]), "km"),
function(x) gsub(" ", "",x[1]))
dat$Gust_kmh <- as.numeric(as.character(dat$Gust_kmh))
library(googleVis)
M <- gvisGeoChart(dat, "latlon", sizevar="cat",
colorvar="Gust_kmh",
options=list(region='035',
backgroundColor="lightblue",
datalessRegionColor="grey"))
plot(M)
## compile a list of available packages on CRAN
aps   <- as.data.frame(available.packages())
## get the list of Depends and clean up a bit
deps  <- gdata::trim(unlist(strsplit(as.character(aps$Depends), ',')))
deps  <- gsub('[ \\(].*|\\n', '', deps)
## freq table
depst <- table(deps)
## plot it!
library(wordcloud)
wordcloud(names(depst), log(as.numeric(depst)), colors = c('green', 'red'))
library(AppliedPredictiveModeling)
install.packages(‘AppliedPredictiveModeling’)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(concrete)
plot(CompressiveStrength)
plot(CompressiveStrength, data= concrete)
plot(concrete$CompressiveStrength, data= concrete)
plot(concrete$CompressiveStrength, col = concrete$Age)
plot(concrete$CompressiveStrength, col = concrete$FlyAsh)
plot(concrete$CompressiveStrength, col = concrete$FlyAsh + 10)
names(concrete)
plot(concrete$CompressiveStrength, col = concrete$Cement)
plot(concrete$CompressiveStrength, col = concrete$Water)
plot(concrete$CompressiveStrength, col = concrete$FineAggregate)
plot(traing$CompressiveStrength, col = training$FineAggregate)
plot(training$CompressiveStrength, col = training$FineAggregate)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col=training$Age)
plot(training$CompressiveStrength, col=training$FlyAsh)
plot(training$CompressiveStrength, col=training$FlyAsh+1)
plot(training$CompressiveStrength, col=training$Cement)
plot(training$CompressiveStrength, col=training$Cement+1)
plot(training$CompressiveStrength, col=training$BlastFurnaceSlag+1)
plot(training$CompressiveStrength, col=training$Water+1)
plot(training$CompressiveStrength, col=training$Superplasticizer+1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(training$Superplasticizer,breaks = 20)
hist(log(training$Superplasticizer),breaks = 20)
hist(log(training$Superplasticizer + 1),breaks = 20)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
?preProcess
preProcess(adData[,"IL*"])
adData[,"IL*"]
adData[,"IL"]
grep("^IL", names(adData))
names[grep("^IL", names(adData))]
names(adData)[grep("^IL", names(adData))]
preProcess(adData[,names(adData)[grep("^IL", names(adData))]])
preProcess(adData[,names(adData)[grep("^IL", names(adData))]],method="pca")
preProcess(adData[,names(adData)[grep("^IL", names(adData))]],method="pca",thresh = 0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training$diagnosis
Ttraining = training[,c("diagnosis", names(adData)[grep("^IL", names(adData))])]
preProc  <- preProcess(adData[,c("diagnosis", names(adData)[grep("^IL", names(adData))])])
preProc  <- preProcess(adData[,c("diagnosis", names(adData)[grep("^IL", names(adData))])])
preProc  <- preProcess(
adData[,c("diagnosis", names(adData)[grep("^IL", names(adData))])])
nadDtata = adData[,c("diagnosis", names(adData)[grep("^IL", names(adData))])]
glm(nadDtata$diagnosis ~ nadDtata[,names(adData)[grep("^IL", names(adData))]])
glm(nadDtata$diagnosis ~ nadDtata[,names(nadDtata)[grep("^IL", names(nadDtata))])
glm(nadDtata$diagnosis ~ nadDtata[,names(nadDtata)[grep("^IL", names(nadDtata))]])
glm(y = nadDtata$diagnosis, x= nadDtata[,names(nadDtata)[grep("^IL", names(nadDtata))]],)
glm(y ~ x, y = nadDtata$diagnosis, x= nadDtata[,names(nadDtata)[grep("^IL", names(nadDtata))]],)
plot(training$CompressiveStrength, col=training$Superplasticizer+1)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(concrete)
plot(training$CompressiveStrength, col=training$Superplasticizer+1)
names(concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(log(training$Superplasticizer + 1),breaks = 20)
hist(training$Superplasticizer,breaks = 200)
log(0)
preProcess(adData[,names(adData)[grep("^IL", names(adData))]],method="pca",thresh = 0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(adData[,names(adData)[grep("^IL", names(adData))]],method="pca",thresh = 0.8)
setwd("~/work/Coursera_homework/Reproducible Research/P1/RepData_PeerAssessment1")
activity = read.csv(file = "./activity.csv",header=TRUE)
activity$day = as.Date(activity$date,format = "%Y-%m-%d")
activity$hour = floor(activity$interval/100)
activity$min = 100 *(activity$interval /100 - floor(activity$interval/100))
activity$time = as.POSIXct(x = paste(activity$date,activity$hour,activity$min),format = "%Y-%m-%d %H %M")
stepsDay <- colSums(table(activity$steps, activity$date))
stepsinterval <- apply(table(activity$steps, activity$interval)*activity$steps,2,mean)
table(activity$steps, activity$interval
)
stepsDay <- colSums(table(activity$steps, activity$date))
stepsDay
library(dplyr)
day_step <- group_by(activity,date)
head(day_step)
day_step
day_step <- group_by(activity, steps, date)
day_step
summarise(day_step)
type(summarise(day_step))
str(summarise(day_step))
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n()))
daily <- group_by(activity, date)
per_day   <- summarise(daily, steps = n())
per_day
?summarize
aggregate(steps ~ date, data= activity, FUN=sum)
per_interval <- aggregate(steps ~ interval, data= activity, FUN=mean)
per_day   <- aggregate(steps ~ date, data= activity, FUN=sum)
hist(per_day, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
hist(per_day$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day")
hist(per_day$steps, breaks=40, main="Histogram total steps per day",
xlab ="Total Steps per day")
hist(per_day$steps, breaks=40, main="Histogram total steps per day",
xlab ="Total Steps per day", col = 'red')
hist(per_day$steps, breaks=50, main="Histogram total steps per day",
xlab ="Total Steps per day", col = 'red')
hist(per_day$steps, breaks=20, main="Histogram total steps per day",
xlab ="Total Steps per day", col = 'red')
hist(per_day$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = 'red')
paste("Mean is ", mean(per_day$steps))
paste("Median is: ", median(per_day$steps))
plot(per_interval, type = 'l',
main = "Time series, steps activity, over few days.", ylab = "Steps", xlab="Time")
per_interval[which.max(per_interval$steps),interval]
per_interval[which.max(per_interval$steps),"interval"]
is.na.data.frame(activity)
which(is.na.data.frame(activity),arr.ind = TRUE)
indexNA <- which(is.na.data.frame(activity),arr.ind = TRUE)
nrow(indexNA)
which(is.na.data.frame(activity),arr.ind = TRUE)
print(nacount)
nacount <- nrow(indexNA)
print(nacount)
paste(nacount)
activityNoNa[indexNA]
activity[indexNA]
activityNoNa <- activity
meapds <- mean(per_day$steps)
medpds <- median(per_day$steps)
activityNoNa[indexNA] <- medpds
is.na.data.frame(activityNoNa)
sum(is.na.data.frame(activityNoNa))
24*60/5
per_dayNoNA   <- aggregate(steps ~ date, data= activityNoNa, FUN=sum)
hist(per_dayNoNA$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = 'red')
activityNoNa[indexNA] <- medpds/288
sum(is.na.data.frame(activityNoNa)) == 0
per_dayNoNA   <- aggregate(steps ~ date, data= activityNoNa, FUN=sum)
hist(per_dayNoNA$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = 'red')
meapnonads <- mean(per_dayNoNA$steps)
medpnonads <- median(per_dayNo$steps)
medpnonads <- median(per_dayNoNA$steps)
hist(per_dayNoNA$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = rgb(0,0,1,0.5))
hist(per_dayN$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = rgb(1,0,0,0.5), add=T)
hist(per_day$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = rgb(1,0,0,0.5), add=T)
meapnonads - meapds
medpnonads - medpds
activity[indexNA]$day
activity[indexNA]$date
activity[indexNA[,1],"date"]
weekdays(activity[indexNA[,1],"date"])
?weekdays
weekdays(activity[indexNA[,1],"interval"])
weekdays.Date(activity$date)
weekdays(activity$date)
activity$time
weekdays(activity$time)
activity[indexNA[,1],"time"]
weekdays(activity[indexNA[,1],"time"])
table(weekdays(activity[indexNA[,1],"time"]))
activity$weekday = weekdays(activity$time)== "Saturday" | "Sunday"
activity$weekday = as.character(weekdays(activity$time))== "Saturday" | "Sunday"
weekdays(activity$time)
weekdays(activity$time) == "Sunday"
activity$weekday = weekdays(activity$time)== ("Saturday" | "Sunday")
activity$weekday = weekdays(activity$time)== "Saturday"
activity$weekday = weekdays(activity$time)== "Sunday"
activity$weekend = weekdays(activity$time)== "Saturday"
activity$weekend = weekdays(activity$time)== "Sunday"
activity$weekday = as.factor(activity$weekend)
activity$weekday
activity$weekday = factor(activity$weekend,levels = c(“weekday”,“weekend”))
activity$weekday1 = factor(activity$weekend,levels = c(“weekday”,“weekend”))
factor(activity$weekend,levels = c(“weekday”,“weekend”))
?factor
which(activity$weekend)
activity[which(activity$weekend)]$weekdays <- "weekdend"
activity[which(activity$weekend)]$weekdays0 <- "weekdend"
activity[which(activity$weekend),]$weekdays0 <- "weekdend"
activity[which(activity$weekend),]
head(activity)
activity[,-"weekday"]
activity[,-c("weekday")]
activity = read.csv(file = "./activity.csv",header=TRUE)
activity$day = as.Date(activity$date,format = "%Y-%m-%d")
activity$hour = floor(activity$interval/100)
activity$min = 100 *(activity$interval /100 - floor(activity$interval/100))
activity$time = as.POSIXct(x = paste(activity$date,activity$hour,activity$min),format = "%Y-%m-%d %H %M")
```
per_day   <- aggregate(steps ~ date, data= activity, FUN=sum)
per_interval <- aggregate(steps ~ interval, data= activity, FUN=mean)
hist(per_day$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = 'red')
meapds <- mean(per_day$steps)
medpds <- median(per_day$steps)
plot(x = activity$time, y=activity$steps, type = 'l',
main = "Time series, steps activity, over all days.", ylab = "Steps", xlab="Time")
plot(per_interval, type = 'l',
main = "Time series, averaged (across all the days) steps activity by time of day.", ylab = "Steps", xlab="Time")
per_interval[which.max(per_interval$steps),"interval"]
indexNA <- which(is.na.data.frame(activity),arr.ind = TRUE)
nacount <- nrow(indexNA)
activityNoNa <- activity
activityNoNa[indexNA] <- medpds/288
sum(is.na.data.frame(activityNoNa)) == 0
per_dayNoNA   <- aggregate(steps ~ date, data= activityNoNa, FUN=sum)
hist(per_dayNoNA$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = 'red')
meapnonads <- mean(per_dayNoNA$steps)
medpnonads <- median(per_dayNoNA$steps)
hist(per_dayNoNA$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = rgb(0,0,1,0.5))
hist(per_day$steps, breaks=30, main="Histogram total steps per day",
xlab ="Total Steps per day", col = rgb(1,0,0,0.5), add=T)
meapnonads - meapds != 0
meapnonads - meapds
medpnonads - medpds == 0
medpnonads - medpds
table(weekdays(activity[indexNA[,1],"time"]))
activity$weekend = weekdays(activity$time)== "Saturday"
activity$weekend = weekdays(activity$time)== "Sunday"
activity[which(activity$weekend),]
activity$weekdays <- factor(levels = c("weekday","weekend"))
activity$weekdays <- factor(activity$weekend , levels = c("weekday","weekend"))
head(activity)
activity[which(activity$weekend),]$weekdays <- "weekdend"
activity[which(activity$weekend),]$weekdays
activity[which(activity$weekend),]$weekdays <- "weekend"
activity[-which(activity$weekend),]$weekdays <- "weekday"
head(activity)
head(weekdays(activity$time))
library(lattice)
xyplot(steps ~ time|weekdays ,data = activity,
main="Steps per interval",
ylab="Steps", xlab="Interval")
str(per_day$date)
per_day$isweekend <- weekdays(as.Date(per_day$date,,format = "%Y-%m-%d")) == "Saturday"
per_day$isweekend <- weekdays(as.Date(per_day$date,,format = "%Y-%m-%d")) == "Sunday"
per_day <- factor(per_day$isweekend , levels = c("weekday","weekend"))
activity$weekend <- weekdays(activity$time)== "Saturday"
activity$weekend <- weekdays(activity$time)== "Sunday"
activity$weekdays <- factor(activity$weekend , levels = c("weekday","weekend"))
activity[which(activity$weekend),]$weekdays <- "weekend"
activity[-which(activity$weekend),]$weekdays <- "weekday"
per_intervalW <- aggregate(steps ~ interval + weekdays, data= activity, FUN=mean)
per_intervalW
xyplot(steps ~ time|weekdays ,data = per_intervalW,
main="Steps per interval",
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW,
main="Steps per interval",
ylab="Number of Steps", xlab="Interval")
?xyplot
panel.xyplot(steps ~ interval|weekdays ,data = per_intervalW,
main="Steps per interval",
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type=l,
main="Steps per interval",
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',
main="Steps per interval",
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',
main="Steps per interval", horizontal = TRUE.
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',
main="Steps per interval", horizontal = TRUE,
ylab="Number of Steps", xlab="Interval")
prepanel.default.xyplot(horizontal=TRUE)
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',
main="Steps per interval", horizontal = TRUE,
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',aspect = c(2,1),
main="Steps per interval", horizontal = TRUE,
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',aspect = c(1,2),
main="Steps per interval", horizontal = TRUE,
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',aspect = c(2,1),
main="Steps per interval", horizontal = TRUE,
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',grid='h',
main="Steps per interval", horizontal = TRUE,
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',grid='v',
main="Steps per interval", horizontal = TRUE,
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',grid=TRUE,
main="Steps per interval", horizontal = TRUE,
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',grid=TRUE,
main="Steps per interval", layout = c(2,1),
ylab="Number of Steps", xlab="Interval")
xyplot(steps ~ interval|weekdays ,data = per_intervalW, type='l',grid=TRUE,
main="Steps per interval", layout = c(1,2),
ylab="Number of Steps", xlab="Interval")
